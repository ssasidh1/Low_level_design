public final class Hero {
    // Fields as given...
    // (Same as your snippet)

    private Hero(Builder builder) {
        this.profession = builder.profession;
        this.name = builder.name;
        this.hairColor = builder.hairColor;
        this.hairType = builder.hairType;
        this.weapon = builder.weapon;
        this.armor = builder.armor;
    }

    public static class Builder {
        // Required parameters can be placed here if any.
        private final Profession profession;
        private final String name;

        // Optional parameters - initialized to default values.
        private HairType hairType = HairType.DEFAULT;    // Assuming default enum or similar.
        private HairColor hairColor = HairColor.DEFAULT; 
        private Armor armor = new Armor();               // Assuming default Armor.
        private Weapon weapon = new Weapon();            // Assuming default Weapon.

        public Builder(Profession profession, String name) {
            this.profession = profession;
            this.name = name;
        }

        public Builder hairType(HairType hairType) {
            this.hairType = hairType;
            return this;
        }

        public Builder hairColor(HairColor hairColor) {
            this.hairColor = hairColor;
            return this;
        }

        public Builder armor(Armor armor) {
            this.armor = armor;
            return this;
        }

        public Builder weapon(Weapon weapon) {
            this.weapon = weapon;
            return this;
        }

        public Hero build() {
            return new Hero(this);
        }
    }
}


// main Function
// In this the new Hero.Builder is called to create hero, such that the Hero is still encapsulated and .build() returns the hero instance
Hero hero = new Hero.Builder(Profession.WARRIOR, "Aragon")
                .hairColor(HairColor.BLACK)
                .hairType(HairType.CURLY)
                .weapon(new Sword())
                .armor(new PlateArmor())
                .build();


